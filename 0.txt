import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

    public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            while (itr.hasMoreTokens()) {
                word.set(itr.nextToken());
                context.write(word, one);
            }
        }
    }

    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}












1. start-all.sh

2. jps

3. export HADOOP_CLASSPATH=$(hadoop classpath)

4. hadoop fs  -mkdir   /wordcount    ----> Creating a folder wordcount in hadoop

5. hadoop fs  -mkdir   /wordcount/Input       ----->Creating a folder Input inside wordcount folder in Hadoop

6. hadoop fs  -put   ./Input/input.txt/    /wordcount/Input        ---->Dumping input.txt to Hadoop

7. export  JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64   export  PATH=$JAVA_HOME/bin:$PATH

8. javac   -classpath   $(hadoop classpath)   -d   .   WordCount.java          ------> RE compile java file using Java 8

9. jar  -cvf  wordcount.jar  -C  .  .          ---->create a jar file called wordcount.jar

10. jar  tf  wordcount.jar               ----> this command will list all the files generated.

Run hadoop job again
11.hadoop  jar  wordcount.jar   WordCount   /wordcount/Input   /wordcount/Input/output_new    ---->WordCount is the name of class

Check the Output
12. hadoop  fs  -cat  /wordcount/Input/output_new/part-r-00000


